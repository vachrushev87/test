import os
import sys
import logging
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler

# –í–æ—Ç –¥–∞–Ω–Ω—ã–µ —à—Ç–∏—É–∫–∏ —É –í–∞—Å –∏ –±–µ–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —É –º–µ–Ω—è –Ω–∞ –ü–ö –ø–æ—Ç–µ—Ä—è–ª –ø—É—Ç—å –ø–æ —ç—Ç–æ–º—É –¥–æ–ø–∏—Å–∞–ª –∫–æ—Å—Ç—ã–ª–∏
# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É (main.py). 
current_dir = os.path.dirname(os.path.abspath(__file__))
# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.abspath(os.path.join(current_dir, '..'))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from src.core.database import init_db, get_async_session
from src.handlers.admin import register_admin_handlers
from src.handlers.manager import register_manager_handlers
from src.core.models import User, Role
from src.teleg–∞.keyboards import main_admin_manager_keyboard
from sqlalchemy import select

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∞—Ä–∏—Å—Ç–∞, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
def main_barista_keyboard() -> ReplyKeyboardMarkup:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∞—Ä–∏—Å—Ç–∞."""
    keyboard = [
        ["üóì –ú–æ–∏ —Å–º–µ–Ω—ã", "‚ú® –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


async def start_command(update: Update, context):
    if not update.message:
        return

    user = update.effective_user
    user_telegram_id = str(user.id)

    async with get_async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        db_user = result.scalar_one_or_none()

        if db_user:
            if db_user.is_active:
                if db_user.role == Role.ADMIN:
                    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_admin_manager_keyboard())
                elif db_user.role == Role.MANAGER:
                    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, –£–ø—Ä–∞–≤–ª—è—é—â–∏–π! –ö–∞–∫ –¥–µ–ª–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ?", reply_markup=main_admin_manager_keyboard())
                elif db_user.role == Role.BARISTA:
                    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, –ë–∞—Ä–∏—Å—Ç–∞! –ñ–µ–ª–∞–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É?", reply_markup=main_barista_keyboard())
                else:
                    await update.message.reply_text("–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            else:
                await update.message.reply_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É Skuratov Coffee! \n"
                "–í—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. \n"
                "–ü—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`",
                parse_mode='Markdown'
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –±–∞—Ä–∏—Å—Ç–∞)

async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ **–≤–Ω—É—Ç—Ä–∏** –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å
    await init_db()
    logger.info("Database initialized.")

    bot_info = await application.bot.get_me()
    logger.info(f"Bot @{bot_info.username} started successfully!")

    admin_ids_str = os.getenv("ADMIN_IDS", "")
    try:
        application.bot_data['ADMIN_IDS'] = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]
    except ValueError:
        logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {admin_ids_str}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
        application.bot_data['ADMIN_IDS'] = []

    logger.info(f"Admin IDs loaded: {application.bot_data['ADMIN_IDS']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set.")
        raise ValueError("TELEGRAM_BOT_TOKEN is required.")

    application = Application.builder().token(token).post_init(post_init).build()
    application.add_handler(CommandHandler("start", start_command))
    register_admin_handlers(application)
    register_manager_handlers(application)
    logger.info("–ë–æ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
